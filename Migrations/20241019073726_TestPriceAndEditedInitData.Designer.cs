// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shoghlana.EF;

#nullable disable

namespace Educational_Medical_platform.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241019073726_TestPriceAndEditedInitData")]
    partial class TestPriceAndEditedInitData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Educational_Medical_platform.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cell",
                            IsCorrect = true,
                            QuestionId = 1,
                            Reason = "Cells are the basic building blocks of life."
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tissue",
                            IsCorrect = false,
                            QuestionId = 1,
                            Reason = "Tissues are made up of cells, but they are not the smallest unit of life."
                        },
                        new
                        {
                            Id = 3,
                            Description = "Organ",
                            IsCorrect = false,
                            QuestionId = 1,
                            Reason = "Organs are composed of tissues, which consist of cells."
                        },
                        new
                        {
                            Id = 4,
                            Description = "Mitochondria",
                            IsCorrect = true,
                            QuestionId = 2,
                            Reason = "Mitochondria are known as the powerhouse of the cell."
                        },
                        new
                        {
                            Id = 5,
                            Description = "Nucleus",
                            IsCorrect = false,
                            QuestionId = 2,
                            Reason = "The nucleus contains the cell's genetic material, but does not produce energy."
                        },
                        new
                        {
                            Id = 6,
                            Description = "Ribosome",
                            IsCorrect = false,
                            QuestionId = 2,
                            Reason = "Ribosomes are responsible for protein synthesis, not energy production."
                        },
                        new
                        {
                            Id = 7,
                            Description = "Protein synthesis",
                            IsCorrect = true,
                            QuestionId = 3,
                            Reason = "This is the primary function of ribosomes in the cell."
                        },
                        new
                        {
                            Id = 8,
                            Description = "Energy production",
                            IsCorrect = false,
                            QuestionId = 3,
                            Reason = "Energy production occurs in the mitochondria, not during protein synthesis."
                        },
                        new
                        {
                            Id = 9,
                            Description = "DNA replication",
                            IsCorrect = false,
                            QuestionId = 3,
                            Reason = "DNA replication is a separate process from protein synthesis."
                        },
                        new
                        {
                            Id = 10,
                            Description = "Protects the cell",
                            IsCorrect = true,
                            QuestionId = 4,
                            Reason = "The cell membrane protects the cell from its environment."
                        },
                        new
                        {
                            Id = 11,
                            Description = "Stores DNA",
                            IsCorrect = false,
                            QuestionId = 4,
                            Reason = "DNA is stored in the nucleus, not the cell membrane."
                        },
                        new
                        {
                            Id = 12,
                            Description = "Produces energy",
                            IsCorrect = false,
                            QuestionId = 4,
                            Reason = "Energy production occurs in mitochondria, not the cell membrane."
                        },
                        new
                        {
                            Id = 13,
                            Description = "Movement of water",
                            IsCorrect = true,
                            QuestionId = 5,
                            Reason = "Osmosis is the movement of water across a membrane."
                        },
                        new
                        {
                            Id = 14,
                            Description = "Transport of nutrients",
                            IsCorrect = false,
                            QuestionId = 5,
                            Reason = "Nutrient transport occurs via active and passive transport mechanisms, not osmosis."
                        },
                        new
                        {
                            Id = 15,
                            Description = "Protein synthesis",
                            IsCorrect = false,
                            QuestionId = 5,
                            Reason = "Protein synthesis involves ribosomes, not the movement of water."
                        },
                        new
                        {
                            Id = 16,
                            Description = "Breaks down food",
                            IsCorrect = true,
                            QuestionId = 6,
                            Reason = "The digestive system's primary role is to break down food."
                        },
                        new
                        {
                            Id = 17,
                            Description = "Circulates blood",
                            IsCorrect = false,
                            QuestionId = 6,
                            Reason = "Blood circulation is the role of the circulatory system."
                        },
                        new
                        {
                            Id = 18,
                            Description = "Transports oxygen",
                            IsCorrect = false,
                            QuestionId = 6,
                            Reason = "Oxygen transport is handled by the respiratory system."
                        },
                        new
                        {
                            Id = 19,
                            Description = "Through the walls of the intestines",
                            IsCorrect = true,
                            QuestionId = 7,
                            Reason = "Nutrients are absorbed through the intestinal walls into the bloodstream."
                        },
                        new
                        {
                            Id = 20,
                            Description = "Via the bloodstream",
                            IsCorrect = false,
                            QuestionId = 7,
                            Reason = "The bloodstream transports nutrients after they are absorbed."
                        },
                        new
                        {
                            Id = 21,
                            Description = "By chewing",
                            IsCorrect = false,
                            QuestionId = 7,
                            Reason = "Chewing is part of the mechanical digestion process, not nutrient absorption."
                        },
                        new
                        {
                            Id = 22,
                            Description = "Mouth, esophagus, stomach",
                            IsCorrect = true,
                            QuestionId = 8,
                            Reason = "These are the primary organs involved in the digestive process."
                        },
                        new
                        {
                            Id = 23,
                            Description = "Brain, heart, lungs",
                            IsCorrect = false,
                            QuestionId = 8,
                            Reason = "These organs are not directly involved in digestion."
                        },
                        new
                        {
                            Id = 24,
                            Description = "Skin, muscles, bones",
                            IsCorrect = false,
                            QuestionId = 8,
                            Reason = "These are not part of the digestive system."
                        },
                        new
                        {
                            Id = 25,
                            Description = "They speed up chemical reactions",
                            IsCorrect = true,
                            QuestionId = 9,
                            Reason = "Enzymes are biological catalysts that accelerate chemical reactions."
                        },
                        new
                        {
                            Id = 26,
                            Description = "They are absorbed",
                            IsCorrect = false,
                            QuestionId = 9,
                            Reason = "Enzymes are not absorbed; they assist in reactions."
                        },
                        new
                        {
                            Id = 27,
                            Description = "They break down food",
                            IsCorrect = false,
                            QuestionId = 9,
                            Reason = "While enzymes help in breaking down food, they do not do so independently."
                        },
                        new
                        {
                            Id = 28,
                            Description = "The wave-like motion that moves food",
                            IsCorrect = true,
                            QuestionId = 10,
                            Reason = "Peristalsis is the wave-like motion that moves food through the digestive tract."
                        },
                        new
                        {
                            Id = 29,
                            Description = "The absorption of nutrients",
                            IsCorrect = false,
                            QuestionId = 10,
                            Reason = "Nutrient absorption occurs after food is moved through the digestive tract."
                        },
                        new
                        {
                            Id = 30,
                            Description = "The secretion of enzymes",
                            IsCorrect = false,
                            QuestionId = 10,
                            Reason = "Enzyme secretion assists in digestion but is not the motion that moves food."
                        },
                        new
                        {
                            Id = 31,
                            Description = "Organs and systems",
                            IsCorrect = true,
                            QuestionId = 11,
                            Reason = "These are the correct components when discussing body structures."
                        },
                        new
                        {
                            Id = 32,
                            Description = "Cells only",
                            IsCorrect = false,
                            QuestionId = 11,
                            Reason = "Cells are part of organs and systems, not the only component."
                        },
                        new
                        {
                            Id = 33,
                            Description = "Muscles only",
                            IsCorrect = false,
                            QuestionId = 11,
                            Reason = "Muscles are just one type of tissue, which is part of organs and systems."
                        },
                        new
                        {
                            Id = 34,
                            Description = "By contracting and relaxing",
                            IsCorrect = true,
                            QuestionId = 12,
                            Reason = "Muscles work by contracting and relaxing to produce movement."
                        },
                        new
                        {
                            Id = 35,
                            Description = "By sending signals",
                            IsCorrect = false,
                            QuestionId = 12,
                            Reason = "While signaling is important, it does not describe how muscles function directly."
                        },
                        new
                        {
                            Id = 36,
                            Description = "By absorbing nutrients",
                            IsCorrect = false,
                            QuestionId = 12,
                            Reason = "Muscles do not absorb nutrients; this is a function of the digestive system."
                        },
                        new
                        {
                            Id = 37,
                            Description = "To understand the human body",
                            IsCorrect = true,
                            QuestionId = 13,
                            Reason = "Anatomy is studied to understand the structure and function of the body."
                        },
                        new
                        {
                            Id = 38,
                            Description = "To pass exams",
                            IsCorrect = false,
                            QuestionId = 13,
                            Reason = "While exams may test knowledge, they are not the purpose of studying anatomy."
                        },
                        new
                        {
                            Id = 39,
                            Description = "To perform surgeries",
                            IsCorrect = false,
                            QuestionId = 13,
                            Reason = "While anatomy knowledge is important for surgeries, it is not the sole purpose of the study."
                        },
                        new
                        {
                            Id = 40,
                            Description = "Nervous, muscular, skeletal",
                            IsCorrect = true,
                            QuestionId = 14,
                            Reason = "These are major body systems."
                        },
                        new
                        {
                            Id = 41,
                            Description = "Respiratory, circulatory",
                            IsCorrect = false,
                            QuestionId = 14,
                            Reason = "While important, they do not encompass all major systems."
                        },
                        new
                        {
                            Id = 42,
                            Description = "Digestive, excretory",
                            IsCorrect = false,
                            QuestionId = 14,
                            Reason = "These systems are essential but are not all-inclusive of body systems."
                        },
                        new
                        {
                            Id = 43,
                            Description = "Controls body functions",
                            IsCorrect = true,
                            QuestionId = 15,
                            Reason = "The nervous system regulates bodily functions."
                        },
                        new
                        {
                            Id = 44,
                            Description = "Transports nutrients",
                            IsCorrect = false,
                            QuestionId = 15,
                            Reason = "Nutrient transport is handled by the circulatory system."
                        },
                        new
                        {
                            Id = 45,
                            Description = "Provides energy",
                            IsCorrect = false,
                            QuestionId = 15,
                            Reason = "Energy provision is not a primary role of the nervous system."
                        },
                        new
                        {
                            Id = 46,
                            Description = "To carry oxygen",
                            IsCorrect = true,
                            QuestionId = 16,
                            Reason = "Hemoglobin in red blood cells carries oxygen."
                        },
                        new
                        {
                            Id = 47,
                            Description = "To fight infections",
                            IsCorrect = false,
                            QuestionId = 16,
                            Reason = "Fighting infections is primarily the role of the immune system."
                        },
                        new
                        {
                            Id = 48,
                            Description = "To clot blood",
                            IsCorrect = false,
                            QuestionId = 16,
                            Reason = "Blood clotting is done by platelets and certain plasma proteins."
                        },
                        new
                        {
                            Id = 49,
                            Description = "By recognizing pathogens",
                            IsCorrect = true,
                            QuestionId = 17,
                            Reason = "The immune system identifies and targets pathogens."
                        },
                        new
                        {
                            Id = 50,
                            Description = "By producing energy",
                            IsCorrect = false,
                            QuestionId = 17,
                            Reason = "Energy production is not a function of the immune system."
                        },
                        new
                        {
                            Id = 51,
                            Description = "By storing nutrients",
                            IsCorrect = false,
                            QuestionId = 17,
                            Reason = "Nutrient storage is a function of the liver and other organs."
                        },
                        new
                        {
                            Id = 52,
                            Description = "Interphase, mitosis, cytokinesis",
                            IsCorrect = true,
                            QuestionId = 18,
                            Reason = "These are the stages of the cell cycle."
                        },
                        new
                        {
                            Id = 53,
                            Description = "Prophase, metaphase, anaphase",
                            IsCorrect = false,
                            QuestionId = 18,
                            Reason = "These terms refer to stages of mitosis, not the entire cell cycle."
                        },
                        new
                        {
                            Id = 54,
                            Description = "Meiosis only",
                            IsCorrect = false,
                            QuestionId = 18,
                            Reason = "Meiosis is a specific type of cell division, separate from the cell cycle."
                        },
                        new
                        {
                            Id = 55,
                            Description = "Programmed cell death",
                            IsCorrect = true,
                            QuestionId = 19,
                            Reason = "Apoptosis is the process of programmed cell death."
                        },
                        new
                        {
                            Id = 56,
                            Description = "Cell growth",
                            IsCorrect = false,
                            QuestionId = 19,
                            Reason = "Cell growth is a separate process from apoptosis."
                        },
                        new
                        {
                            Id = 57,
                            Description = "Cell division",
                            IsCorrect = false,
                            QuestionId = 19,
                            Reason = "Cell division is the process of replicating cells, distinct from programmed cell death."
                        },
                        new
                        {
                            Id = 58,
                            Description = "Carries genetic information",
                            IsCorrect = true,
                            QuestionId = 20,
                            Reason = "DNA is the molecule that carries genetic information."
                        },
                        new
                        {
                            Id = 59,
                            Description = "Produces energy",
                            IsCorrect = false,
                            QuestionId = 20,
                            Reason = "Energy production is not a role of DNA."
                        },
                        new
                        {
                            Id = 60,
                            Description = "Fights diseases",
                            IsCorrect = false,
                            QuestionId = 20,
                            Reason = "DNA does not directly fight diseases; it contains the instructions for making proteins."
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intro")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LikesNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "2b222b22-2222-2222-2222-222222222222",
                            CategoryId = 1,
                            Conclusion = "Understanding human anatomy is essential for medical professionals and enthusiasts alike.",
                            Content = "This blog covers the basics of human anatomy...",
                            ImageURL = "/Images/Blogs/blog1.jpg",
                            Intro = "Anatomy is the branch of biology concerned with the study of the structure of organisms and their parts.",
                            LikesNumber = 10,
                            Title = "Introduction to Human Anatomy"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "2b222b22-2222-2222-2222-222222222222",
                            CategoryId = 1,
                            Conclusion = "The study of comparative anatomy is crucial for evolutionary biology and understanding the functional adaptations of organisms.",
                            Content = "This blog explores comparative anatomy across species...",
                            ImageURL = "/Images/Blogs/blog1.jpg",
                            Intro = "Comparative anatomy allows us to understand the similarities and differences between different organisms.",
                            LikesNumber = 15,
                            Title = "Advanced Comparative Anatomy"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "2b222b22-2222-2222-2222-222222222222",
                            CategoryId = 2,
                            Conclusion = "A deep understanding of cell physiology is vital for advancements in medical science.",
                            Content = "Understanding the basics of cell physiology...",
                            ImageURL = "/Images/Blogs/blog1.jpg",
                            Intro = "Cell physiology is the study of the functions of cells and their components.",
                            LikesNumber = 20,
                            Title = "Fundamentals of Cell Physiology"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "2b222b22-2222-2222-2222-222222222222",
                            CategoryId = 1,
                            Conclusion = "This overview serves as a foundational step towards more detailed studies of specific systems.",
                            Content = "This blog provides an overview of human anatomy...",
                            ImageURL = "/Images/Blogs/blog1.jpg",
                            Intro = "An overview of human anatomy highlights the complexity and organization of the human body.",
                            LikesNumber = 5,
                            SubCategoryId = 1,
                            Title = "Human Anatomy Overview"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = "3c333c33-3333-3333-3333-333333333333",
                            CategoryId = 2,
                            Conclusion = "Grasping systemic physiology is crucial for understanding how the body maintains homeostasis.",
                            Content = "An introductory blog on systemic physiology...",
                            ImageURL = "/Images/Blogs/blog1.jpg",
                            Intro = "Systemic physiology studies the functions of various systems within the body.",
                            LikesNumber = 8,
                            SubCategoryId = 4,
                            Title = "Systemic Physiology Basics"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = "3c333c33-3333-3333-3333-333333333333",
                            CategoryId = 3,
                            Conclusion = "Understanding these applications is essential for safe and effective patient care.",
                            Content = "Exploring clinical applications in pharmacology...",
                            ImageURL = "/Images/Blogs/blog1.jpg",
                            Intro = "Pharmacology focuses on the interactions between drugs and living organisms.",
                            LikesNumber = 12,
                            SubCategoryId = 5,
                            Title = "Clinical Applications of Pharmacology"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = "3c333c33-3333-3333-3333-333333333333",
                            CategoryId = 4,
                            Conclusion = "A solid grasp of pathology is necessary for any healthcare professional.",
                            Content = "A comprehensive overview of pathology...",
                            ImageURL = "/Images/Blogs/blog1.jpg",
                            Intro = "Pathology is the study of disease, its causes, and effects on the body.",
                            LikesNumber = 7,
                            SubCategoryId = 7,
                            Title = "Pathology: An Overview"
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Blog_User_Likes", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BlogId");

                    b.HasIndex("BlogId");

                    b.ToTable("Blog_User_Likes");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublisherRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            Description = "A comprehensive guide for first-year medical students.",
                            PublishDate = new DateTime(2021, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "Mohamed Galal",
                            PublisherRole = "User",
                            SubCategoryId = 9,
                            ThumbnailURL = "https://example.com/thumbnails/book1.jpg",
                            Title = "Introduction to Medical Studies",
                            Url = "https://example.com/books/intro-medical-studies",
                            UserId = "2b222b22-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            Description = "In-depth study of human anatomy for advanced medical students.",
                            PublishDate = new DateTime(2020, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "Mohamed Galal",
                            PublisherRole = "User",
                            SubCategoryId = 9,
                            ThumbnailURL = "https://example.com/thumbnails/book2.jpg",
                            Title = "Advanced Human Anatomy",
                            Url = "https://example.com/books/advanced-anatomy",
                            UserId = "2b222b22-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 5,
                            Description = "A practical guide to clinical diagnostic methods.",
                            PublishDate = new DateTime(2019, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "Alaa Ahmed",
                            PublisherRole = "User",
                            SubCategoryId = 10,
                            ThumbnailURL = "https://example.com/thumbnails/book3.jpg",
                            Title = "Clinical Diagnosis Techniques",
                            Url = "https://example.com/books/clinical-diagnosis",
                            UserId = "3c333c33-3333-3333-3333-333333333333"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 6,
                            Description = "Essential pharmacology concepts for healthcare professionals.",
                            PublishDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "Alaa Ahmed",
                            PublisherRole = "User",
                            SubCategoryId = 11,
                            ThumbnailURL = "https://example.com/thumbnails/book4.jpg",
                            Title = "Pharmacology Basics",
                            Url = "https://example.com/books/pharmacology-basics",
                            UserId = "3c333c33-3333-3333-3333-333333333333"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 6,
                            Description = "Key topics in pathology explained in a clear and concise manner.",
                            PublishDate = new DateTime(2021, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "Alaa Ahmed",
                            PublisherRole = "User",
                            SubCategoryId = 12,
                            ThumbnailURL = "https://example.com/thumbnails/book5.jpg",
                            Title = "Pathology Essentials",
                            Url = "https://example.com/books/pathology-essentials",
                            UserId = "3c333c33-3333-3333-3333-333333333333"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 7,
                            Description = "Basic microbiology concepts for beginners.",
                            PublishDate = new DateTime(2020, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "Ehab Naser",
                            PublisherRole = "Admin",
                            SubCategoryId = 13,
                            ThumbnailURL = "https://example.com/thumbnails/book6.jpg",
                            Title = "Microbiology Fundamentals",
                            Url = "https://example.com/books/microbiology-fundamentals",
                            UserId = "1a111a11-1111-1111-1111-111111111111"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "A handbook on modern surgical techniques.",
                            PublishDate = new DateTime(2023, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "Ehab Naser",
                            PublisherRole = "Admin",
                            SubCategoryId = 13,
                            ThumbnailURL = "https://example.com/thumbnails/book7.jpg",
                            Title = "Surgical Procedures Handbook",
                            Url = "https://example.com/books/surgical-procedures",
                            UserId = "1a111a11-1111-1111-1111-111111111111"
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Anatomy Course",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physiology Course",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pharmacology Course",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pathology Course",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Anatomy Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Physiology Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pharmacology Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pathology Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Anatomy Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Physiology Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pharmacology Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pathology Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Anatomy Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "Physiology Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 15,
                            Name = "Pharmacology Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 16,
                            Name = "Pathology Exam",
                            Type = 3
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<float>("DurationInhours")
                        .HasColumnType("real");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Preview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DurationInhours = 10f,
                            InstructorId = "2b222b22-2222-2222-2222-222222222222",
                            Price = 1500m,
                            Status = 1,
                            SubCategoryId = 1,
                            Title = "physiology",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            DurationInhours = 20f,
                            InstructorId = "2b222b22-2222-2222-2222-222222222222",
                            Price = 1000m,
                            Status = 0,
                            SubCategoryId = 3,
                            Title = "anatomy",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            DurationInhours = 30f,
                            InstructorId = "3c333c33-3333-3333-3333-333333333333",
                            Price = 2500m,
                            Status = 2,
                            SubCategoryId = 5,
                            Title = "histology",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Objectives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Enhancing medical skills"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Description = "Enhancing physiology knowledge"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Description = "increasing job opportunities"
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "What is the basic unit of life?"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Description = "Which organelle is known as the powerhouse of the cell?"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            Description = "What is the function of ribosomes?"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            Description = "What is the role of the cell membrane?"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 2,
                            Description = "What is osmosis?"
                        },
                        new
                        {
                            Id = 6,
                            Description = "What is the primary function of the digestive system?",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "How does the body absorb nutrients?",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "What are the main components of the digestive system?",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "What is the role of enzymes in digestion?",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "What is the process of peristalsis?",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 11,
                            BlogId = 1,
                            Description = "What are the key structures of the human body?"
                        },
                        new
                        {
                            Id = 12,
                            BlogId = 1,
                            Description = "How does the muscular system work?"
                        },
                        new
                        {
                            Id = 13,
                            BlogId = 2,
                            Description = "What is the importance of studying anatomy?"
                        },
                        new
                        {
                            Id = 14,
                            BlogId = 2,
                            Description = "What are the different systems of the human body?"
                        },
                        new
                        {
                            Id = 15,
                            BlogId = 3,
                            Description = "What role does the nervous system play in body functions?"
                        },
                        new
                        {
                            Id = 16,
                            Description = "What is the primary function of red blood cells?",
                            TestId = 1
                        },
                        new
                        {
                            Id = 17,
                            Description = "How does the immune system protect the body?",
                            TestId = 1
                        },
                        new
                        {
                            Id = 18,
                            Description = "What are the stages of the cell cycle?",
                            TestId = 2
                        },
                        new
                        {
                            Id = 19,
                            Description = "What is apoptosis?",
                            TestId = 2
                        },
                        new
                        {
                            Id = 20,
                            Description = "What role does DNA play in inheritance?",
                            TestId = 2
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Requirements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "being medical student"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Description = "having laptop"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            Description = "buying premium package"
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.StandardTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Fullmark")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("StandardTests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 13,
                            Difficulty = 0,
                            DurationInMinutes = 60,
                            Fullmark = 100,
                            Price = 0,
                            SubCategoryId = 25,
                            Title = "Test1",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 14,
                            Difficulty = 1,
                            DurationInMinutes = 100,
                            Fullmark = 150,
                            Price = 100,
                            SubCategoryId = 27,
                            Title = "Test2",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 15,
                            Difficulty = 2,
                            DurationInMinutes = 200,
                            Fullmark = 300,
                            Price = 150,
                            SubCategoryId = 29,
                            Title = "Test3",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Human Anatomy",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Comparative Anatomy",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Name = "Cell Physiology",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "Systemic Physiology",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Name = "Clinical Pharmacology",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Name = "Pharmacokinetics",
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Name = "General Pathology",
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Name = "Systemic Pathology",
                            Type = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Name = "Human Anatomy Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Name = "Comparative Anatomy Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            Name = "Cell Physiology Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            Name = "Systemic Physiology Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 7,
                            Name = "Clinical Pharmacology Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 7,
                            Name = "Pharmacokinetics Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 8,
                            Name = "General Pathology Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 8,
                            Name = "Systemic Pathology Book",
                            Type = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 9,
                            Name = "Human Anatomy Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 9,
                            Name = "Comparative Anatomy Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 10,
                            Name = "Cell Physiology Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 10,
                            Name = "Systemic Physiology Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 11,
                            Name = "Clinical Pharmacology Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 11,
                            Name = "Pharmacokinetics Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 12,
                            Name = "General Pathology Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 12,
                            Name = "Systemic Pathology Blog",
                            Type = 2
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 13,
                            Name = "Human Anatomy Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 13,
                            Name = "Comparative Anatomy Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 14,
                            Name = "Cell Physiology Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 14,
                            Name = "Systemic Physiology Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 15,
                            Name = "Clinical Pharmacology Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 15,
                            Name = "Pharmacokinetics Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 16,
                            Name = "General Pathology Exam",
                            Type = 3
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 16,
                            Name = "Systemic Pathology Exam",
                            Type = 3
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.User_Enrolled_Courses", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentVideoNumber")
                        .HasColumnType("int");

                    b.Property<float?>("Degree")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("UserEnrolledCourses");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("videoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Number = 1,
                            Title = "new video",
                            videoURL = "https://www.youtube.com/watch?v=4oThHBo2-Gs"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Number = 1,
                            Title = "old video",
                            videoURL = "https://www.youtube.com/watch?v=mgEAimOoyHk"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Number = 1,
                            Title = "funny video",
                            videoURL = "https://www.youtube.com/watch?v=zhCKr62s12w"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "952625cb-623b-4f8e-a426-c9e14ffe41bc",
                            ConcurrencyStamp = "9e9ef764-d672-42d8-99ee-93c2410d8ae0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ea3206f7-8571-4e45-b209-e593236f3420",
                            ConcurrencyStamp = "df2d8409-cg61-4aac-ae65-b26fbbab77f2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1a111a11-1111-1111-1111-111111111111",
                            RoleId = "952625cb-623b-4f8e-a426-c9e14ffe41bc"
                        },
                        new
                        {
                            UserId = "2b222b22-2222-2222-2222-222222222222",
                            RoleId = "ea3206f7-8571-4e45-b209-e593236f3420"
                        },
                        new
                        {
                            UserId = "3c333c33-3333-3333-3333-333333333333",
                            RoleId = "ea3206f7-8571-4e45-b209-e593236f3420"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubscribedToPlatform")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a111a11-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ac4fe1b-a796-43ad-84ae-db3f5cced4b1",
                            Email = "Ehab_Naser@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ehab",
                            IsSubscribedToPlatform = false,
                            LastName = "Naser",
                            LockoutEnabled = false,
                            NormalizedEmail = "EHAB_NASER@EXAMPLE.COM",
                            NormalizedUserName = "EHAB_NASER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpGmToEsmFf3hCwlYBXcsnubP3m4cLBmwx0Xd9OLBvIvUtjGFYjsIdNH4iz+Ydi5w==",
                            PhoneNumber = "011548726155",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f9ef764-d632-42d2-99ee-93v2410d8ae0",
                            TwoFactorEnabled = false,
                            UserName = "Ehab_Naser"
                        },
                        new
                        {
                            Id = "2b222b22-2222-2222-2222-222222222222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69091573-a5f8-4bbc-94ad-7122af3e7785",
                            Email = "Mohamed_Galal@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            IsSubscribedToPlatform = false,
                            LastName = "Galal",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMED_GALAL@EXAMPLE.COM",
                            NormalizedUserName = "MOHAMED_GALAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEFsreVFDhsti5sva3ct6+cNB2eJ/OzWN/D2ib3p8w1YZxSC+Ed8YBtl+jOHAbsTRYg==",
                            PhoneNumber = "01054871566",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f9ed761-d631-42d2-99ee-93v2420d8ae0",
                            TwoFactorEnabled = false,
                            UserName = "Mohamed_Galal"
                        },
                        new
                        {
                            Id = "3c333c33-3333-3333-3333-333333333333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f281c62-010e-4c9f-9bdf-9bb219b51998",
                            Email = "Alaa_Test@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alaa",
                            IsSubscribedToPlatform = false,
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAA_AHMED@EXAMPLE.COM",
                            NormalizedUserName = "ALAA_AHMED",
                            PasswordHash = "AQAAAAIAAYagAAAAECvo+ybjnvCrjW62Q4I1fxvnG6NyKkGq74urmhvrtH27q2Nlpy7IybSr4lWmZaJLZQ==",
                            PhoneNumber = "01225193482",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f1ed761-a631-42dq-99ee-93z2420d8aeq",
                            TwoFactorEnabled = false,
                            UserName = "Alaa_Ahmed"
                        });
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Answer", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Blog", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educational_Medical_platform.Models.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educational_Medical_platform.Models.SubCategory", "SubCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Blog_User_Likes", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Book", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Educational_Medical_platform.Models.SubCategory", "SubCategory")
                        .WithMany("Books")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Course", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", "Instructor")
                        .WithMany("CoursesCreated")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educational_Medical_platform.Models.SubCategory", "SubCategory")
                        .WithMany("Courses")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instructor");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Objective", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Course", "Course")
                        .WithMany("Objectives")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Question", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Blog", "Blog")
                        .WithMany("Questions")
                        .HasForeignKey("BlogId");

                    b.HasOne("Educational_Medical_platform.Models.Course", "Course")
                        .WithMany("Questions")
                        .HasForeignKey("CourseId");

                    b.HasOne("Educational_Medical_platform.Models.SubCategory", "SubCategory")
                        .WithMany("QuestionBank")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("Educational_Medical_platform.Models.StandardTest", "Test")
                        .WithMany("Question")
                        .HasForeignKey("TestId");

                    b.Navigation("Blog");

                    b.Navigation("Course");

                    b.Navigation("SubCategory");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Requirement", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Course", "Course")
                        .WithMany("Requirements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.StandardTest", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educational_Medical_platform.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.SubCategory", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.User_Enrolled_Courses", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Course", "Course")
                        .WithMany("EnrolledUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Video", b =>
                {
                    b.HasOne("Educational_Medical_platform.Models.Course", "Course")
                        .WithMany("Videos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Blog", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Category", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Books");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Course", b =>
                {
                    b.Navigation("EnrolledUsers");

                    b.Navigation("Objectives");

                    b.Navigation("Questions");

                    b.Navigation("Requirements");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.StandardTest", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("Educational_Medical_platform.Models.SubCategory", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Books");

                    b.Navigation("Courses");

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Books");

                    b.Navigation("CoursesCreated");

                    b.Navigation("EnrolledCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
